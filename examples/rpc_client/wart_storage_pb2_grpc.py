# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wart_storage_pb2 as wart__storage__pb2


class WartStorageStub(object):
    """
    space_name: String = "nebula:${space_id}"
    tag: Tag or EdgeType
    key: String

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ChoiceNodes = channel.unary_unary(
                '/wart_storage.WartStorage/ChoiceNodes',
                request_serializer=wart__storage__pb2.ChoiceNodesRequest.SerializeToString,
                response_deserializer=wart__storage__pb2.StorageResponse.FromString,
                )
        self.FetchNode = channel.unary_unary(
                '/wart_storage.WartStorage/FetchNode',
                request_serializer=wart__storage__pb2.FetchNodeRequest.SerializeToString,
                response_deserializer=wart__storage__pb2.StorageResponse.FromString,
                )
        self.FetchNeighbors = channel.unary_unary(
                '/wart_storage.WartStorage/FetchNeighbors',
                request_serializer=wart__storage__pb2.FetchNeighborsRequest.SerializeToString,
                response_deserializer=wart__storage__pb2.StorageResponse.FromString,
                )


class WartStorageServicer(object):
    """
    space_name: String = "nebula:${space_id}"
    tag: Tag or EdgeType
    key: String

    """

    def ChoiceNodes(self, request, context):
        """随机选择节点
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchNode(self, request, context):
        """获取节点属性
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchNeighbors(self, request, context):
        """获取边的属性
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WartStorageServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ChoiceNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.ChoiceNodes,
                    request_deserializer=wart__storage__pb2.ChoiceNodesRequest.FromString,
                    response_serializer=wart__storage__pb2.StorageResponse.SerializeToString,
            ),
            'FetchNode': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchNode,
                    request_deserializer=wart__storage__pb2.FetchNodeRequest.FromString,
                    response_serializer=wart__storage__pb2.StorageResponse.SerializeToString,
            ),
            'FetchNeighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchNeighbors,
                    request_deserializer=wart__storage__pb2.FetchNeighborsRequest.FromString,
                    response_serializer=wart__storage__pb2.StorageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wart_storage.WartStorage', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WartStorage(object):
    """
    space_name: String = "nebula:${space_id}"
    tag: Tag or EdgeType
    key: String

    """

    @staticmethod
    def ChoiceNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wart_storage.WartStorage/ChoiceNodes',
            wart__storage__pb2.ChoiceNodesRequest.SerializeToString,
            wart__storage__pb2.StorageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wart_storage.WartStorage/FetchNode',
            wart__storage__pb2.FetchNodeRequest.SerializeToString,
            wart__storage__pb2.StorageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchNeighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wart_storage.WartStorage/FetchNeighbors',
            wart__storage__pb2.FetchNeighborsRequest.SerializeToString,
            wart__storage__pb2.StorageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
