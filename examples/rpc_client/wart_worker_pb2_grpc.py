# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import wart_worker_pb2 as wart__worker__pb2


class WartWorkerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenSession = channel.unary_unary(
                '/wart_worker.WartWorker/OpenSession',
                request_serializer=wart__worker__pb2.OpenSessionRequest.SerializeToString,
                response_deserializer=wart__worker__pb2.OpenSessionResponse.FromString,
                )
        self.CloseSession = channel.unary_unary(
                '/wart_worker.WartWorker/CloseSession',
                request_serializer=wart__worker__pb2.CloseSessionRequest.SerializeToString,
                response_deserializer=wart__worker__pb2.CloseSessionResponse.FromString,
                )
        self.StreamingRun = channel.stream_stream(
                '/wart_worker.WartWorker/StreamingRun',
                request_serializer=wart__worker__pb2.StreamingRunRequest.SerializeToString,
                response_deserializer=wart__worker__pb2.StreamingRunResponse.FromString,
                )
        self.UpdateStore = channel.stream_stream(
                '/wart_worker.WartWorker/UpdateStore',
                request_serializer=wart__worker__pb2.UpdateStoreRequest.SerializeToString,
                response_deserializer=wart__worker__pb2.UpdateStoreResponse.FromString,
                )


class WartWorkerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def OpenSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamingRun(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStore(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WartWorkerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenSession,
                    request_deserializer=wart__worker__pb2.OpenSessionRequest.FromString,
                    response_serializer=wart__worker__pb2.OpenSessionResponse.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=wart__worker__pb2.CloseSessionRequest.FromString,
                    response_serializer=wart__worker__pb2.CloseSessionResponse.SerializeToString,
            ),
            'StreamingRun': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamingRun,
                    request_deserializer=wart__worker__pb2.StreamingRunRequest.FromString,
                    response_serializer=wart__worker__pb2.StreamingRunResponse.SerializeToString,
            ),
            'UpdateStore': grpc.stream_stream_rpc_method_handler(
                    servicer.UpdateStore,
                    request_deserializer=wart__worker__pb2.UpdateStoreRequest.FromString,
                    response_serializer=wart__worker__pb2.UpdateStoreResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'wart_worker.WartWorker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WartWorker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def OpenSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wart_worker.WartWorker/OpenSession',
            wart__worker__pb2.OpenSessionRequest.SerializeToString,
            wart__worker__pb2.OpenSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/wart_worker.WartWorker/CloseSession',
            wart__worker__pb2.CloseSessionRequest.SerializeToString,
            wart__worker__pb2.CloseSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamingRun(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/wart_worker.WartWorker/StreamingRun',
            wart__worker__pb2.StreamingRunRequest.SerializeToString,
            wart__worker__pb2.StreamingRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateStore(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/wart_worker.WartWorker/UpdateStore',
            wart__worker__pb2.UpdateStoreRequest.SerializeToString,
            wart__worker__pb2.UpdateStoreResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
