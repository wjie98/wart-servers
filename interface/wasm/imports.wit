variant value {
    nil,
    bol(bool),
    i32(s32),
    i64(s64),
    f32(float32),
    f64(float64),
    txt(string),
}

variant vector {
    nil,
    bol(list<bool>),
    i32(list<s32>),
    i64(list<s64>),
    f32(list<float32>),
    f64(list<float64>),
    txt(list<string>),
}

record item {
    key: string,
    val: value,
}

record series {
    key: string,
    val: vector,
}

type row = list<item>
type table = list<series>

resource data-frame {
    static new: function(name: string, defa: row) -> option<data-frame>
    push: function(data: row) -> option<u64>
    size: function() -> option<u64>
}

enum merge-type {
    add, mov,
}

resource storage {
    static new: function() -> option<storage>
    
    choice-nodes: function(tag: string, number: s32) -> option<vector>
    query-nodes: function(id: value, tag: string, keys: list<string>) -> option<row>
    query-neighbors: function(id: value, tag: string, keys: list<string>, reversely: bool) -> option<tuple<vector, table>>

    query-kv: function(keys: list<string>, defa: value) -> option<vector>
    update-kv: function(keys: list<string>, vals: vector, ops: merge-type) -> option<u64>
}

enum log-level {
    trace, debug, info, warn, error,
}

log: function(lv: log-level, msg: string)
log-enabled: function(lv: log-level) -> bool
